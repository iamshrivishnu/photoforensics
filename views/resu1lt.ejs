<html>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Result | Photo Forensics</title>

    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.0/css/all.css">
    <!-- Bootstrap core CSS -->
    <link rel="stylesheet" href="/css/bootstrap.min.css">
    <!-- Material Design Bootstrap -->
    <link rel="stylesheet" href="/css/compiled-4.7.1.min.css?ver=4.7.1" />
    <!-- File Upload -->
    <link rel="stylesheet" href="/css/file.upload.css" />
    <!-- Custom Styles -->
    <link rel="stylesheet" href="/css/custom.styles.css" />



    <style>
        /*basic reset*/
        * {
            margin: 0;
            padding: 0;
        }

        /*adding a black bg to the body to make things clearer*/
        body {
            /* background: black; */
            background: #0f0c29;
            /* fallback for old browsers */
            background: -webkit-linear-gradient(to right, #24243e, #302b63, #0f0c29);
            /* Chrome 10-25, Safari 5.1-6 */
            background: linear-gradient(to right, #24243e, #302b63, #0f0c29);
            /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */

        }

        canvas {
            display: block;
        }
    </style>

<style>
   

    .waves {
        height: 75vmin;
        width: 75vmin;
        position: absolute;
        bottom: -10vmin;
        right: -3vmin;
    }

    .waves img {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 100%;
        border-radius: 50%;
    }

    .waves .wave-1:before,
    .waves .wave-2:before,
    .waves .wave-3:before {
        transition: border-radius 1s ease;
    }

    .waves .wave-1 {
        position: absolute;
        top: -2.5vmin;
        right: -2.5vmin;
        bottom: -2.5vmin;
        left: -2.5vmin;
    }

    .waves .wave-1:before {
        content: "";
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        background: #0d57ff;
        border-radius: 42% 58% 54% 46% / 59% 58% 42% 41%;
    }

    .waves .wave-2 {
        position: absolute;
        top: -5.5vmin;
        right: -5.5vmin;
        bottom: -5.5vmin;
        left: -5.5vmin;
    }

    .waves .wave-2:before {
        content: "";
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        background: rgba(13, 87, 255, 0.6);
        border-radius: 43% 57% 34% 66% / 57% 39% 61% 43%;
    }

    .waves .wave-3 {
        position: absolute;
        top: -8.5vmin;
        right: -8.5vmin;
        bottom: -8.5vmin;
        left: -8.5vmin;
    }

    .waves .wave-3:before {
        content: "";
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        background: rgba(13, 87, 255, 0.2);
        border-radius: 59% 41% 44% 56% / 45% 54% 46% 55%;
    }

    .waves.round .wave-1:before,
    .waves.round .wave-2:before,
    .waves.round .wave-3:before {
        border-radius: 50%;
    }

    .waves.other .wave-1:before {
        border-radius: 87% 62% 74% 64% / 60% 74% 62% 76%;
    }

    .waves.other .wave-2:before {
        border-radius: 52% 84% 74% 64% / 68% 58% 75% 54%;
    }

    .waves.other .wave-3:before {
        border-radius: 66% 59% 66% 71% / 53% 72% 65% 79%;
    }

    .waves.rotate .wave-1:before {
        animation: rotate 20s linear infinite;
    }

    .waves.rotate .wave-2:before {
        animation: rotate 30s linear reverse infinite;
    }

    .waves.rotate .wave-3:before {
        animation: rotate 25s linear infinite;
    }

    .waves.grow .wave-1,
    .waves.grow .wave-2,
    .waves.grow .wave-3 {
        animation: grow 7s ease-in-out infinite;
    }

    .waves.grow .wave-1 {
        animation-delay: -4.2s;
    }

    .waves.grow .wave-2 {
        animation-delay: -2.8s;
    }

    .waves.grow .wave-3 {
        animation-delay: -1.4s;
    }

    @keyframes rotate {
        from {
            transform: rotate(0deg);
        }

        to {
            transform: rotate(360deg);
        }
    }

    @keyframes grow {

        0%,
        3%,
        100% {
            transform: scale(0.99);
        }

        50% {
            transform: scale(1.07);
        }
    }

    .options {
        padding: 30px 45px;
        background: #f0f0f0;
        position: absolute;
        border-radius: 3px;
        top: 25px;
        left: 25px;
    }

    .options h2 {
        margin-top: 0;
        text-align: center;
        text-decoration: underline;
    }

    .options h3 {
        margin: 0;
    }

    .options hr {
        margin: 15px -5px;
    }

    .options>label {
        display: block;
        margin: 5px 0 5px 20px;
    }

    .waves.rotate.grow:after {
        content: "";
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        border-radius: 50%;
        background-image: url("https://i.kym-cdn.com/photos/images/original/000/244/457/793.gif");
        background-size: cover;
        background-position: center;
    }
</style>


</head>

<body>
    <div class="container mt-5">
        <div class="row d-flex justify-content-center">
            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                <!-- Card Start -->
                <div class="card animated bounceInDown z-depth-5 cloudy-knoxville-gradient">
                    <div class="card-body animated shake delay-1s">
                        <!-- Card Header -->
                        <div class="form-header blue-gradient">
                            <h3><i class="far fa-image"></i> Result</h3>
                        </div>
                        <!-- Card Body -->
                        <div class="row">
                            <div class="col" style="width:250px;height:250px; margin: 10%">



                                <div class="waves rotate" style="width:250px;height:250px; margin: 10%"> 
                                    <div class="wave-3"></div>
                                    <div class="wave-2"></div>
                                    <div class="wave-1"></div><img src="/uploads/img7.jpg" />
                                </div>
                          








                            </div>
                            <div class="col">
                                <div class="form-md border text-center">
                                    <h4><%= result%></h4>
                                </div>
                                <!-- Card Body -->
                                <div class="row">
                                    <div class="col">
                                        <button class="btn aqua-gradient">Check Metadata</button>

                                    </div>
                                    <div class="col">
                                        <button class="btn blue-gradient">Analyze with Machine Learning</button>

                                    </div>
                                </div>
                            </div>
                        </div>



                    </div>
                    <!-- Card End -->
                </div>
            </div>
        </div>
    </div>




    <!-- JavaScripts -->
    <!-- JQuery -->
    <script type="text/javascript" src="/js/jquery.min.js"></script>
    <!-- Bootstrap tooltips -->
    <script type="text/javascript" src="/js/popper.min.js"></script>
    <!-- Bootstrap core JavaScript -->
    <script type="text/javascript" src="/js/bootstrap.js"></script>
    <!-- MDB core JavaScript -->
    <script type="text/javascript" src="/js/mdb.min.js"></script>

    <script>
        const wavesEl = document.querySelector('.waves');

        function onChange(cb, el) {
            el.addEventListener('change', cb);
        }

        function setShape(ev) {
            wavesEl.classList.remove('round', 'other');
            const newShape = ev.target.value;
            if (newShape) wavesEl.classList.add(newShape);
        }

        function setAnimation(ev) {
            const animation = ev.target.value;
            const value = ev.target.checked;
            wavesEl.classList.toggle(animation, value);
        }

        document
            .querySelectorAll('[name="shape"]')
            .forEach(onChange.bind(this, setShape));

        document
            .querySelectorAll('[name="animation"]')
            .forEach(onChange.bind(this, setAnimation));
    </script>


    <!-- <script>
        var c = document.getElementById("c");
        var ctx = c.getContext("2d");

        //making the canvas full screen
        c.height = window.innerHeight;
        c.width = window.innerWidth;

        //chinese characters - taken from the unicode charset
        var chinese = "1101010101001010101010100101010101101010010101011001101010111111";
        //converting the string into an array of single characters
        chinese = chinese.split("");

        var font_size = 18;
        var columns = c.width / font_size; //number of columns for the rain
        //an array of drops - one per column
        var drops = [];
        //x below is the x coordinate
        //1 = y co-ordinate of the drop(same for every drop initially)
        for (var x = 0; x < columns; x++)
            drops[x] = 1;

        //drawing the characters
        function draw() {
            //Black BG for the canvas
            //translucent BG to show trail
            // Create gradient
// var grd = ctx.createRadialGradient(0,0,5,c.width,c.height,2000);
// 10, 10, 150, 80
// grd.addColorStop(0, "green");
// grd.addColorStop(1, "blue");

            ctx.fillStyle="rgba(0, 0, 0, 0.05)"; 
            // ctx.fillStyle=grd; 
            
            ctx.fillRect(0, 0, c.width, c.height);

            // ctx.fillStyle = "#"+((1<<24)*Math.random()|0).toString(16) //green text
            ctx.fillStyle = "#ff00ff"
            ctx.font = font_size + "px arial";
            //looping over drops
            for (var i = 0; i < drops.length; i++) {
                //a random chinese character to print
                var text = chinese[Math.floor(Math.random() * chinese.length)];
                //x = i*font_size, y = value of drops[i]*font_size
                ctx.fillText(text, i * font_size, drops[i] * font_size);

                //sending the drop back to the top randomly after it has crossed the screen
                //adding a randomness to the reset to make the drops scattered on the Y axis
                if (drops[i] * font_size > c.height && Math.random() > 0.975)
                    drops[i] = 0;

                //incrementing Y coordinate
                drops[i]++;
            }
        }

        setInterval(draw, 33);
    </script> -->



</body>

</html>